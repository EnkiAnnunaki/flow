Error ---------------------------------------------------------------------------------------------------- import.js:7:2

Cannot cast `<Foo />` to renders `React.Element` because `Foo` element [1] does not render `React.Element` [2].
[incompatible-cast]

   import.js:7:2
   7| (<Foo />: renders React.Element<typeof Bar>); // ERROR
       ^^^^^^^ [1]

References:
   import.js:7:11
   7| (<Foo />: renders React.Element<typeof Bar>); // ERROR
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- import.js:8:2

Cannot cast `<Bar />` to renders `React.Element` because `Bar` element [1] does not render `React.Element` [2].
[incompatible-cast]

   import.js:8:2
   8| (<Bar />: renders React.Element<typeof Foo>); // ERROR
       ^^^^^^^ [1]

References:
   import.js:8:11
   8| (<Bar />: renders React.Element<typeof Foo>); // ERROR
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:10:2

Cannot cast `<MaybeNumber />` to renders number because a value that renders nothing [1] does not render number [2].
[incompatible-cast]

   import.js:10:2
   10| (<MaybeNumber />: renders number); // ERROR
        ^^^^^^^^^^^^^^^ [1]

References:
   import.js:10:27
   10| (<MaybeNumber />: renders number); // ERROR
                                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:14:2

Cannot cast `<StarNumber />` to renders number because `$ReadOnlyArray` [1] does not render number [2].
[incompatible-cast]

   import.js:14:2
    14| (<StarNumber />: renders number); // ERROR
         ^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:698:15
   698| declare class $ReadOnlyArray<+T> {
                      ^^^^^^^^^^^^^^ [1]
   import.js:14:26
    14| (<StarNumber />: renders number); // ERROR
                                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:14:2

Cannot cast `<StarNumber />` to renders number because a value that renders nothing [1] does not render number [2].
[incompatible-cast]

   import.js:14:2
   14| (<StarNumber />: renders number); // ERROR
        ^^^^^^^^^^^^^^ [1]

References:
   import.js:14:26
   14| (<StarNumber />: renders number); // ERROR
                                ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:15:2

Cannot cast `<StarNumber />` to renders? number because `$ReadOnlyArray` [1] does not render number [2].
[incompatible-cast]

   import.js:15:2
    15| (<StarNumber />: renders? number); // ERROR
         ^^^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:698:15
   698| declare class $ReadOnlyArray<+T> {
                      ^^^^^^^^^^^^^^ [1]
   import.js:15:27
    15| (<StarNumber />: renders? number); // ERROR
                                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- interop.js:15:2

Cannot cast `<Baz />` to renders `React.Element` because `React.Element` [1] does not render `React.Element` [2].
[incompatible-cast]

   interop.js:15:2
   15| (<Baz />: renders React.Element<typeof Qux>); // ERROR
        ^^^^^^^ [1]

References:
   interop.js:15:11
   15| (<Baz />: renders React.Element<typeof Qux>); // ERROR
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- interop.js:21:2

Cannot cast `<RendersBaz />` to renders `React.Element` because `React.Element` [1] does not render `React.Element` [2].
[incompatible-cast]

   interop.js:21:2
   21| (<RendersBaz />: renders React.Element<typeof Qux>); // ERROR
        ^^^^^^^^^^^^^^ [1]

References:
   interop.js:21:18
   21| (<RendersBaz />: renders React.Element<typeof Qux>); // ERROR
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- interop.js:25:2

Cannot cast `<LongerChain />` to renders `React.Element` because `React.Element` [1] does not render
`React.Element` [2]. [incompatible-cast]

   interop.js:25:2
   25| (<LongerChain />: renders React.Element<typeof Qux>); // ERROR
        ^^^^^^^^^^^^^^^ [1]

References:
   interop.js:25:19
   25| (<LongerChain />: renders React.Element<typeof Qux>); // ERROR
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------- no_any_with_renders_react_node.js:5:10

Cannot return `Bar` because: [incompatible-return]
 - Either class `Bar` [1] is incompatible with `React.Element` [2].
 - Or class `Bar` [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in class `Bar` [1] but exists in `$Iterable` [4].

   no_any_with_renders_react_node.js:5:10
    5|   return Bar; // ERROR
                ^^^

References:
   no_any_with_renders_react_node.js:3:7
    3| class Bar {}
             ^^^ [1]
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [4]


Error --------------------------------------------------------------------------------- no_spoofing_element_types.js:3:2

Cannot cast `x` to renders `React.Element` because object type [1] does not render `React.Element` [2].
[incompatible-cast]

   no_spoofing_element_types.js:3:2
   3| (x: renders React$Element<typeof Foo>); // ERROR!
       ^

References:
   no_spoofing_element_types.js:2:18
   2| declare const x: {+type: typeof Foo};
                       ^^^^^^^^^^^^^^^^^^^ [1]
   no_spoofing_element_types.js:3:13
   3| (x: renders React$Element<typeof Foo>); // ERROR!
                  ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------- no_spoofing_element_types.js:7:2

Cannot cast `y` to renders `React.Element` because object type [1] does not render `React.Element` [2].
[incompatible-cast]

   no_spoofing_element_types.js:7:2
   7| (y: renders React$Element<typeof Bar>); // ERROR! TODO better error message
       ^

References:
   no_spoofing_element_types.js:6:18
   6| declare const y: {+type: typeof Bar};
                       ^^^^^^^^^^^^^^^^^^^ [1]
   no_spoofing_element_types.js:7:5
   7| (y: renders React$Element<typeof Bar>); // ERROR! TODO better error message
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- poly.js:11:2

Cannot cast `el` to renders undefined because `Fragment` element [1] does not render undefined [2]. [incompatible-cast]

   poly.js:11:2
   11| (el: renders void); // error
        ^^ [1]

References:
   poly.js:11:14
   11| (el: renders void); // error
                    ^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- poly.js:19:37

Cannot create `FooContainer` element because `Fragment` element [1] does not render `React.Element` [2] in property
`children`. [incompatible-type]

   poly.js:19:37
   19| const transitiveBad = <FooContainer><Fragment><Bar /></Fragment></FooContainer>; // error
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   poly.js:16:34
   16| component FooContainer(children: renders React.Element<typeof Foo>) { return null };
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_maybe.js:13:2

Cannot cast `<Bar />` to renders? `MenuItem` because `Bar` element [1] does not render `MenuItem` [2].
[incompatible-cast]

   renders_maybe.js:13:2
   13| (<Bar />: renders? MenuItem); // ERROR
        ^^^^^^^ [1]

References:
   renders_maybe.js:13:11
   13| (<Bar />: renders? MenuItem); // ERROR
                 ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_maybe.js:20:2

Cannot cast `Bad` to renders? `MenuItem` because `Bar` [1] does not render `MenuItem` [2]. [incompatible-cast]

   renders_maybe.js:20:2
   20| (Bad: renders? MenuItem); // ERROR
        ^^^ [1]

References:
   renders_maybe.js:20:7
   20| (Bad: renders? MenuItem); // ERROR
             ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_maybe.js:27:2

Cannot cast `rendersMaybeMenuItem` to renders `MenuItem` because a value that renders nothing [1] does not render
`MenuItem` [2]. [incompatible-cast]

   renders_maybe.js:27:2
   27| (rendersMaybeMenuItem: renders MenuItem); // ERROR
        ^^^^^^^^^^^^^^^^^^^^

References:
   renders_maybe.js:26:37
   26| declare const rendersMaybeMenuItem: renders? MenuItem;
                                           ^^^^^^^^^^^^^^^^^ [1]
   renders_maybe.js:27:24
   27| (rendersMaybeMenuItem: renders MenuItem); // ERROR
                              ^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_maybe.js:31:2

Cannot cast `rendersMaybeUnion` to renders `MenuItem` because a value that renders nothing [1] does not render
`MenuItem` [2]. [incompatible-cast]

   renders_maybe.js:31:2
   31| (rendersMaybeUnion: renders MenuItem); // ERROR
        ^^^^^^^^^^^^^^^^^

References:
   renders_maybe.js:30:34
   30| declare const rendersMaybeUnion: renders? (MenuItem | Bar);
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   renders_maybe.js:31:21
   31| (rendersMaybeUnion: renders MenuItem); // ERROR
                           ^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_maybe.js:31:2

Cannot cast `rendersMaybeUnion` to renders `MenuItem` because `Bar` [1] does not render `MenuItem` [2].
[incompatible-cast]

   renders_maybe.js:31:2
   31| (rendersMaybeUnion: renders MenuItem); // ERROR
        ^^^^^^^^^^^^^^^^^ [1]

References:
   renders_maybe.js:31:21
   31| (rendersMaybeUnion: renders MenuItem); // ERROR
                           ^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_maybe.js:38:2

Cannot cast `rendersMaybeMenuItem` to renders union type because: [incompatible-cast]
 - Either `MenuItem` [1] does not render `Bar` [2].
 - Or renders? `MenuItem` [1] is incompatible with boolean literal `false` [3].

   renders_maybe.js:38:2
   38| (rendersMaybeMenuItem: renders (null | false | void | Bar)); // ERROR
        ^^^^^^^^^^^^^^^^^^^^ [1]

References:
   renders_maybe.js:38:55
   38| (rendersMaybeMenuItem: renders (null | false | void | Bar)); // ERROR
                                                             ^^^ [2]
   renders_maybe.js:38:40
   38| (rendersMaybeMenuItem: renders (null | false | void | Bar)); // ERROR
                                              ^^^^^ [3]


Error ---------------------------------------------------------------------------------------------- renders_star.js:8:2

Cannot cast `true` to renders* `MenuItem` because boolean [1] does not render `MenuItem` [2]. [incompatible-cast]

   renders_star.js:8:2
   8| (true: renders* MenuItem); // ERROR
       ^^^^ [1]

References:
   renders_star.js:8:8
   8| (true: renders* MenuItem); // ERROR
             ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- renders_star.js:24:30

Cannot resolve name `RendersHuh`. [cannot-resolve-name]

   24| declare const rendersHuhBad: RendersHuh<Bad>;
                                    ^^^^^^^^^^


Error -------------------------------------------------------------------------------------------- renders_star.js:30:35

Cannot cast array literal to renders* `MenuItem` because `Bad` element [1] does not render `MenuItem` [2].
[incompatible-cast]

   renders_star.js:30:35
   30| ([<MenuItem />, <BlueMenuItem />, <Bad />]: renders* MenuItem); // ERROR
                                         ^^^^^^^ [1]

References:
   renders_star.js:30:45
   30| ([<MenuItem />, <BlueMenuItem />, <Bad />]: renders* MenuItem); // ERROR
                                                   ^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:19:4

Cannot cast `rendersFooOrBar` to `typeof rendersFooOrRendersBar` because: [incompatible-cast]
 - Either `React.Element` [1] does not render `React.Element` [2].
 - Or `React.Element` [1] does not render `React.Element` [3].

   renders_to_renders.js:19:4
   19|   (rendersFooOrBar: typeof rendersFooOrRendersBar); // ERROR
          ^^^^^^^^^^^^^^^ [1]

References:
   renders_to_renders.js:11:39
   11| declare const rendersFooOrRendersBar: renders React$Element<typeof Foo> | renders React$Element<typeof Bar>;
                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   renders_to_renders.js:11:75
   11| declare const rendersFooOrRendersBar: renders React$Element<typeof Foo> | renders React$Element<typeof Bar>;
                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:25:4

Cannot cast `rendersFoo` to renders `React.Element` because `React.Element` [1] does not render `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:25:4
   25|   (rendersFoo: renders React$Element<typeof Bar>); // ERROR
          ^^^^^^^^^^ [1]

References:
   renders_to_renders.js:25:16
   25|   (rendersFoo: renders React$Element<typeof Bar>); // ERROR
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:26:4

Cannot cast `rendersFoo` to renders `React.Element` because `React.Element` [1] does not render `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:26:4
   26|   (rendersFoo: renders React$Element<typeof Bar>); // ERROR
          ^^^^^^^^^^ [1]

References:
   renders_to_renders.js:26:16
   26|   (rendersFoo: renders React$Element<typeof Bar>); // ERROR
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:28:4

Cannot cast `rendersFoo` to renders renders `React.Element` because `React.Element` [1] does not render
`React.Element` [2]. [incompatible-cast]

   renders_to_renders.js:28:4
   28|   (rendersFoo: renders renders React$Element<typeof Bar>); // ERROR
          ^^^^^^^^^^ [1]

References:
   renders_to_renders.js:28:24
   28|   (rendersFoo: renders renders React$Element<typeof Bar>); // ERROR
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:29:4

Cannot cast `rendersFoo` to renders renders `React.Element` because `React.Element` [1] does not render
`React.Element` [2]. [incompatible-cast]

   renders_to_renders.js:29:4
   29|   (rendersFoo: renders renders React$Element<typeof Bar>); // ERROR
          ^^^^^^^^^^ [1]

References:
   renders_to_renders.js:29:24
   29|   (rendersFoo: renders renders React$Element<typeof Bar>); // ERROR
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:39:4

Cannot cast `rendersQux` to renders union type because: [incompatible-cast]
 - Either `React.Element` [1] does not render `React.Element` [2].
 - Or `React.Element` [1] does not render `React.Element` [3].

   renders_to_renders.js:39:4
   39|   (rendersQux: renders (React$Element<typeof Foo> | React$Element<typeof Baz>)); // ERROR
          ^^^^^^^^^^ [1]

References:
   renders_to_renders.js:39:25
   39|   (rendersQux: renders (React$Element<typeof Foo> | React$Element<typeof Baz>)); // ERROR
                               ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   renders_to_renders.js:39:53
   39|   (rendersQux: renders (React$Element<typeof Foo> | React$Element<typeof Baz>)); // ERROR
                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:51:4

Cannot cast `rendersBazOrBaz` to renders `React.Element` because `React.Element` [1] does not render
`React.Element` [2]. [incompatible-cast]

   renders_to_renders.js:51:4
   51|   (rendersBazOrBaz: renders React$Element<typeof Bar>); // ERROR
          ^^^^^^^^^^^^^^^ [1]

References:
   renders_to_renders.js:51:21
   51|   (rendersBazOrBaz: renders React$Element<typeof Bar>); // ERROR
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:59:4

Cannot cast `rendersFooOrBar` to renders union type because: [incompatible-cast]
 - Either `React.Element` [1] does not render `React.Element` [2].
 - Or `React.Element` [1] does not render `React.Element` [3].

   renders_to_renders.js:59:4
   59|   (rendersFooOrBar: renders (React$Element<typeof Foo> | React$Element<typeof Baz>)); // ERROR
          ^^^^^^^^^^^^^^^ [1]

References:
   renders_to_renders.js:59:30
   59|   (rendersFooOrBar: renders (React$Element<typeof Foo> | React$Element<typeof Baz>)); // ERROR
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   renders_to_renders.js:59:58
   59|   (rendersFooOrBar: renders (React$Element<typeof Foo> | React$Element<typeof Baz>)); // ERROR
                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:65:4

Cannot cast `Foo` to renders `React.Element` because component Foo [1] does not render `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:65:4
   65|   (Foo: renders React$Element<typeof Foo>); // ERROR
          ^^^

References:
   renders_to_renders.js:2:1
    2| component Foo() renders null { return null }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:65:9
   65|   (Foo: renders React$Element<typeof Foo>); // ERROR
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:71:4

Cannot cast `mixedElement` to renders union type because `React.Element` [1] does not render union type [2].
[incompatible-cast]

   renders_to_renders.js:71:4
   71|   (mixedElement: renders (React$Element<typeof Foo> | React$Element<typeof Bar>)); // ERROR
          ^^^^^^^^^^^^

References:
   renders_to_renders.js:69:31
   69|   declare const mixedElement: React$MixedElement;
                                     ^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:71:18
   71|   (mixedElement: renders (React$Element<typeof Foo> | React$Element<typeof Bar>)); // ERROR
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:71:4

Cannot instantiate `React.Element` because string [1] is incompatible with AbstractComponent [2] in type argument `T`.
[incompatible-type-arg]

   renders_to_renders.js:71:4
    71|   (mixedElement: renders (React$Element<typeof Foo> | React$Element<typeof Bar>)); // ERROR
           ^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:162:49
   162| declare type React$MixedElement = React$Element<React$ElementType>;
                                                        ^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/react.js:213:32
   213| type React$ComponentRenders<T: React$AbstractComponent<empty>> =
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:77:4

Cannot cast `rendersFooOrBar` to empty because `React.Element` [1] is incompatible with empty [2]. [incompatible-cast]

   renders_to_renders.js:77:4
    77|   (rendersFooOrBar: empty); // ERROR
           ^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:162:35
   162| declare type React$MixedElement = React$Element<React$ElementType>;
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:77:21
    77|   (rendersFooOrBar: empty); // ERROR
                            ^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because undefined [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:16:5
   16|   | void
           ^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because null [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:17:5
   17|   | null
           ^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because boolean [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:18:5
   18|   | boolean
           ^^^^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because number [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:19:5
   19|   | number
           ^^^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because string [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:20:5
   20|   | string
           ^^^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because `React.Portal` [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:80:4

Cannot cast `rendersNode` to `React.MixedElement` because `$Iterable` [1] is incompatible with `React.Element` [2].
[incompatible-cast]

   renders_to_renders.js:80:4
   80|   (rendersNode: React$MixedElement); // ERROR
          ^^^^^^^^^^^

References:
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:80:17
   80|   (rendersNode: React$MixedElement); // ERROR
                       ^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because undefined [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:16:5
   16|   | void
           ^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because boolean [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:18:5
   18|   | boolean
           ^^^^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because number [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:19:5
   19|   | number
           ^^^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because string [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:20:5
   20|   | string
           ^^^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because `React.Element` [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because `React.Portal` [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:83:4

Cannot cast `rendersNullOrNull` to null because `$Iterable` [1] is incompatible with null [2]. [incompatible-cast]

   renders_to_renders.js:83:4
   83|   (rendersNullOrNull: null); // ERROR
          ^^^^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:83:23
   83|   (rendersNullOrNull: null); // ERROR
                             ^^^^ [2]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:84:19

Cannot get `rendersFooOrBar.props` because property `props` is missing in `React.Element` [1]. [prop-missing]

   renders_to_renders.js:84:19
    84|   rendersFooOrBar.props; // ERROR
                          ^^^^^

References:
   <BUILTINS>/react.js:162:35
   162| declare type React$MixedElement = React$Element<React$ElementType>;
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in undefined [1]. [incompatible-use]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:16:5
   16|   | void
           ^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in null [1]. [incompatible-use]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:17:5
   17|   | null
           ^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in `Boolean` [1]. [prop-missing]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:18:5
   18|   | boolean
           ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in `Number` [1]. [prop-missing]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:19:5
   19|   | number
           ^^^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in `String` [1]. [prop-missing]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:20:5
   20|   | string
           ^^^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in `React.Element` [1]. [prop-missing]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in `React.Portal` [1]. [incompatible-use]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:85:15

Cannot get `rendersNode.props` because property `props` is missing in `$Iterable` [1]. [prop-missing]

   renders_to_renders.js:85:15
   85|   rendersNode.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- renders_to_renders.js:91:4

Cannot cast `rendersBaz` to empty because `React.Element` [1] is incompatible with empty [2]. [incompatible-cast]

   renders_to_renders.js:91:4
    91|   (rendersBaz: empty); // ERROR
           ^^^^^^^^^^

References:
   <BUILTINS>/react.js:162:35
   162| declare type React$MixedElement = React$Element<React$ElementType>;
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   renders_to_renders.js:91:16
    91|   (rendersBaz: empty); // ERROR
                       ^^^^^ [2]


Error -------------------------------------------------------------------------------------- renders_to_renders.js:92:14

Cannot get `rendersBaz.props` because property `props` is missing in `React.Element` [1]. [prop-missing]

   renders_to_renders.js:92:14
    92|   rendersBaz.props; // ERROR
                     ^^^^^

References:
   <BUILTINS>/react.js:162:35
   162| declare type React$MixedElement = React$Element<React$ElementType>;
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validate_instantiation.js:2:18

Cannot use object type [1] as a render type because: [incompatible-type]
 - Either object type [1] is incompatible with `React.Element` [2].
 - Or object type [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in object type [1] but exists in `$Iterable` [4].

Render types must be a subtype of `React.Node` or a reference to a component-syntax component.

   validate_instantiation.js:2:18
    2| type Y = renders {}; // ERROR
                        ^^ [1]

References:
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------- validation/autofixable.js:7:23

Cannot use boolean literal `false` [1], null [2] and undefined [3] as the type argument of renders type. Only elements
of a component-syntax components can appear in renders. If you want to express the idea of rendering zero or one item,
please use `renders?` instead. [invalid-render]

   validation/autofixable.js:7:23
   7| type RBad1 = renders (Foo | null | void | false);
                            ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   validation/autofixable.js:7:43
   7| type RBad1 = renders (Foo | null | void | false);
                                                ^^^^^ [1]
   validation/autofixable.js:7:29
   7| type RBad1 = renders (Foo | null | void | false);
                                  ^^^^ [2]
   validation/autofixable.js:7:36
   7| type RBad1 = renders (Foo | null | void | false);
                                         ^^^^ [3]


Error ----------------------------------------------------------------------------------- validation/autofixable.js:8:23

Cannot use read-only array type [1], array type [2], array type [3], `$Iterable` [4] and `Set` [5] as the type argument
of renders type. Only elements of a component-syntax components can appear in renders. If you want to express the idea
of rendering zero or more items, please use `renders*` instead. [invalid-render]

   validation/autofixable.js:8:23
   8| type RBad2 = renders (Foo | Array<Foo> | Foo[] | $ReadOnlyArray<Foo> | Set<Foo> | Iterable<Foo>);
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   validation/autofixable.js:8:50
   8| type RBad2 = renders (Foo | Array<Foo> | Foo[] | $ReadOnlyArray<Foo> | Set<Foo> | Iterable<Foo>);
                                                       ^^^^^^^^^^^^^^^^^^^ [1]
   validation/autofixable.js:8:42
   8| type RBad2 = renders (Foo | Array<Foo> | Foo[] | $ReadOnlyArray<Foo> | Set<Foo> | Iterable<Foo>);
                                               ^^^^^ [2]
   validation/autofixable.js:8:29
   8| type RBad2 = renders (Foo | Array<Foo> | Foo[] | $ReadOnlyArray<Foo> | Set<Foo> | Iterable<Foo>);
                                  ^^^^^^^^^^ [3]
   validation/autofixable.js:8:83
   8| type RBad2 = renders (Foo | Array<Foo> | Foo[] | $ReadOnlyArray<Foo> | Set<Foo> | Iterable<Foo>);
                                                                                        ^^^^^^^^^^^^^ [4]
   validation/autofixable.js:8:72
   8| type RBad2 = renders (Foo | Array<Foo> | Foo[] | $ReadOnlyArray<Foo> | Set<Foo> | Iterable<Foo>);
                                                                             ^^^^^^^^ [5]


Error ----------------------------------------------------------------------------------- validation/autofixable.js:9:23

Cannot use array type [1] and null [2] as the type argument of renders type. Only elements of a component-syntax
components can appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*`
instead. [invalid-render]

   validation/autofixable.js:9:23
   9| type RBad3 = renders (Foo | Array<Foo> | null);
                            ^^^^^^^^^^^^^^^^^^^^^^^

References:
   validation/autofixable.js:9:29
   9| type RBad3 = renders (Foo | Array<Foo> | null);
                                  ^^^^^^^^^^ [1]
   validation/autofixable.js:9:42
   9| type RBad3 = renders (Foo | Array<Foo> | null);
                                               ^^^^ [2]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:10:22

Cannot use array type [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*` instead.
[invalid-render]

   10| type RBad4 = renders Array<Foo>;
                            ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:11:24

Cannot use null [1] as the type argument of renders type. Only elements of a component-syntax components can appear in
renders. `renders?` already includes React nodes that render nothing. [invalid-render]

   validation/autofixable.js:11:24
   11| type RBad5 = renders? (Foo | null);
                              ^^^^^^^^^^

References:
   validation/autofixable.js:11:30
   11| type RBad5 = renders? (Foo | null);
                                    ^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:12:23

Cannot use null or undefined [1] and null or undefined [1] as the type argument of renders type. Only elements of a
component-syntax components can appear in renders. `renders?` already includes React nodes that render nothing.
[invalid-render]

   12| type RBad6 = renders? ?Foo;
                             ^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:13:23

Cannot use array type [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*` instead.
[invalid-render]

   13| type RBad7 = renders? Array<Foo>;
                             ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:14:23

Cannot use array type [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. `renders*` already models rendering any amount of children in all possible nesting structures.
[invalid-render]

   14| type RBad8 = renders* Array<Foo>;
                             ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:15:24

Cannot use null [1] as the type argument of renders type. Only elements of a component-syntax components can appear in
renders. `renders*` already includes React nodes that render nothing. [invalid-render]

   validation/autofixable.js:15:24
   15| type RBad9 = renders* (Foo | null);
                              ^^^^^^^^^^

References:
   validation/autofixable.js:15:30
   15| type RBad9 = renders* (Foo | null);
                                    ^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:16:24

Cannot use null [1] as the type argument of renders type. Only elements of a component-syntax components can appear in
renders. If you want to express the idea of rendering zero or one item, please use `renders?` instead. [invalid-render]

   validation/autofixable.js:16:24
   16| type RBad10 = renders (Foo | null | 1);
                              ^^^^^^^^^^^^^^

References:
   validation/autofixable.js:16:30
   16| type RBad10 = renders (Foo | null | 1);
                                    ^^^^ [1]


Error ---------------------------------------------------------------------------------- validation/autofixable.js:16:24

Cannot use number literal `1` [1] as the type argument of renders type. [invalid-render]

   validation/autofixable.js:16:24
   16| type RBad10 = renders (Foo | null | 1);
                              ^^^^^^^^^^^^^^

References:
   validation/autofixable.js:16:37
   16| type RBad10 = renders (Foo | null | 1);
                                           ^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:18:22

Cannot use `React.Element` [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. [invalid-render]

   18| type RBad1 = renders React$Element<typeof Baz>; // error
                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:19:22

Cannot use `React.Element` [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. [invalid-render]

   19| type RBad2 = renders React$Element<typeof Boz>; // error
                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:20:22

Cannot use number literal `1` [1] as the type argument of renders type. [invalid-render]

   20| type RBad3 = renders 1; // error
                            ^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:21:22

Cannot use `React.Element` [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. [invalid-render]

   21| type RBad4 = renders React$Node; // error
                            ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:21:22

Cannot use `React.Portal` [1] as the type argument of renders type. [invalid-render]

   21| type RBad4 = renders React$Node; // error
                            ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:21:22

Cannot use boolean [1] as the type argument of renders type. [invalid-render]

   21| type RBad4 = renders React$Node; // error
                            ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:21:22

Cannot use null [1], undefined [1] and `$Iterable` [1] as the type argument of renders type. Only elements of a
component-syntax components can appear in renders. If you want to express the idea of rendering zero or more items,
please use `renders*` instead. [invalid-render]

   21| type RBad4 = renders React$Node; // error
                            ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:21:22

Cannot use number [1] as the type argument of renders type. [invalid-render]

   21| type RBad4 = renders React$Node; // error
                            ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:21:22

Cannot use string [1] as the type argument of renders type. [invalid-render]

   21| type RBad4 = renders React$Node; // error
                            ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:22:22

Cannot use `Error` [1] as a render type because: [incompatible-type]
 - Either `Error` [1] is incompatible with `React.Element` [2].
 - Or `Error` [1] is incompatible with `React.Portal` [3].
 - Or property `@@iterator` is missing in `Error` [1] but exists in `$Iterable` [4].

Render types must be a subtype of `React.Node` or a reference to a component-syntax component.

   validation/validation.js:22:22
   22| type RBad5 = renders Error; // error
                            ^^^^^ [1]

References:
   <BUILTINS>/react.js:21:5
   21|   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [2]
   <BUILTINS>/react.js:22:5
   22|   | React$Portal
           ^^^^^^^^^^^^ [3]
   <BUILTINS>/react.js:23:5
   23|   | Iterable<?React$Node>;
           ^^^^^^^^^^^^^^^^^^^^^ [4]


Error ----------------------------------------------------------------------------------- validation/validation.js:22:22

Cannot use `Error` [1] as the type argument of renders type. [invalid-render]

   22| type RBad5 = renders Error; // error
                            ^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:23:35

Cannot use `React.Element` [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. [invalid-render]

   23| type RBad6 = component () renders React$Element<typeof Baz>; // error
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:26:41

Cannot use `React.Element` [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. [invalid-render]

   26| component BadComponentRenders() renders React$Element<typeof Baz> {return <Baz />} // error
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:29:52

Cannot use `T` [1] as the type argument of renders type. Generic type renders are only allowed in rendering declaration
of component syntax components. [invalid-render]

   29| type BannedGenericRenders<T: React$Node> = renders T; // error
                                                          ^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:31:37

Cannot use boolean literal `false` [1], null [2] and undefined [3] as the type argument of renders type. Only elements
of a component-syntax components can appear in renders. If you want to express the idea of rendering zero or one item,
please use `renders?` instead. [invalid-render]

   validation/validation.js:31:37
   31| type BadSpecificRenders1 = renders (false | null | void); // error
                                           ^^^^^^^^^^^^^^^^^^^

References:
   validation/validation.js:31:37
   31| type BadSpecificRenders1 = renders (false | null | void); // error
                                           ^^^^^ [1]
   validation/validation.js:31:45
   31| type BadSpecificRenders1 = renders (false | null | void); // error
                                                   ^^^^ [2]
   validation/validation.js:31:52
   31| type BadSpecificRenders1 = renders (false | null | void); // error
                                                          ^^^^ [3]


Error ----------------------------------------------------------------------------------- validation/validation.js:32:37

Cannot use array type [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*` instead.
[invalid-render]

   32| type BadSpecificRenders2 = renders (Array<React$Element<typeof Foo>>); // error
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:33:37

Cannot use read-only array type [1] as the type argument of renders type. Only elements of a component-syntax components
can appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*` instead.
[invalid-render]

   33| type BadSpecificRenders3 = renders ($ReadOnlyArray<React$Element<typeof Foo>>); // error
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:34:37

Cannot use `$Iterable` [1] as the type argument of renders type. Only elements of a component-syntax components can
appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*` instead.
[invalid-render]

   34| type BadSpecificRenders4 = renders (Iterable<React$Element<typeof Foo>>); // error
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:35:37

Cannot use read-only array type [1] as the type argument of renders type. Only elements of a component-syntax components
can appear in renders. If you want to express the idea of rendering zero or more items, please use `renders*` instead.
[invalid-render]

   35| type BadSpecificRenders5 = renders (React.ChildrenArray<React$Element<typeof Foo>>); // error
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------- validation/validation.js:36:37

Cannot use read-only array type [1] and null [1] as the type argument of renders type. Only elements of a
component-syntax components can appear in renders. If you want to express the idea of rendering zero or more items,
please use `renders*` instead. [invalid-render]

   36| type BadSpecificRenders6 = renders (React.ChildrenArray<React$Element<typeof Foo> | null>); // error
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]



Found 92 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
