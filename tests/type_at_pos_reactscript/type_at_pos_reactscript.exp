component.js:1:11
Flags:
component Foo
component.js:1:11,1:13

component.js:3:11
Flags:
component Bar
component.js:3:11,3:13

component.js:5:11
Flags:
component Baz
component.js:5:11,5:13

component.js:7:11
Flags:
component Qux
component.js:7:11,7:13

component.js:9:11
Flags:
component Poly<T>
component.js:9:11,9:14

component.js:11:11
Flags:
type PolyElementTypeApp1 = Poly<string>
component.js:11:6,11:24

component.js:13:29
Flags:
element of component Poly<T>
component.js:13:28,13:31

component.js:15:11
Flags:
type ConcretizedPolyComponent = Poly<string> extends React$Element<infer C>
  ? C
  : empty
= React$AbstractComponent<{+foo: string}, mixed, renders React$Node>
component.js:15:6,15:29

component.js:17:20
Flags:
element of component Foo
component.js:17:19,17:21

component.js:22:17
Flags:
element of component x
component.js:22:17,22:17

component.js:25:24
Flags:
?number
component.js:25:23,25:25

render_types.js:1:6
Flags:
type X = renders null
render_types.js:1:6,1:6

render_types.js:3:6
Flags:
type Y = renders (null | number)
render_types.js:3:6,3:6

render_types.js:8:6
Flags:
type Z = renders Foo
render_types.js:8:6,8:6

render_types.js:10:6
Flags:
type U = renders (Foo | Bar)
render_types.js:10:6,10:6

render_types.js:12:6
Flags:
type V = renders Foo | Bar
render_types.js:12:6,12:6

render_types.js:15:6
Flags:
type MaybeRenders = renders? Foo
render_types.js:15:6,15:17

render_types.js:18:6
Flags:
type StarRenders = renders* Foo
render_types.js:18:6,18:16

render_types.js:21:6
Flags:
type RendersElement = renders Foo
render_types.js:21:6,21:19

render_types.js:25:6
Flags:
type PolyElement = renders Poly<number>
render_types.js:25:6,25:16

render_types.js:28:6
Flags:
type PolyElementNoTargs = renders Poly
render_types.js:28:6,28:23

render_types.js:30:36
Flags:
element of component Poly<T>
render_types.js:30:36,30:39

render_types.js:35:6
Flags:
type UnionPoly = renders (Poly | Poly2)
render_types.js:35:6,35:14

render_types.js:8:7 = {
  "types":{
    "unevaluated":{
      "expanded":{
        "kind":"TypeAlias",
        "name":{"provenance":{"kind":"Local","loc":"render_types.js:8:6"},"name":"Z"},
        "typeParams":null,
        "body":{
          "kind":"Renders",
          "argument":{
            "kind":"Generic",
            "type":{"provenance":{"kind":"Local","loc":"render_types.js:5:1-15"},"name":"Foo"},
            "generic_kind":"type alias"
          },
          "variant":"normal"
        }
      },
      "type":"type Z = renders Foo"
    },
    "evaluated":{
      "expanded":{
        "kind":"TypeAlias",
        "name":{"provenance":{"kind":"Local","loc":"render_types.js:8:6"},"name":"Z"},
        "typeParams":null,
        "body":{
          "kind":"Renders",
          "argument":{
            "kind":"Generic",
            "type":{"provenance":{"kind":"Local","loc":"render_types.js:5:1-15"},"name":"Foo"},
            "generic_kind":"type alias"
          },
          "variant":"normal"
        }
      },
      "type":"type Z = renders Foo"
    }
  },
  "reasons":[],
  "loc":{
    "source":"render_types.js",
    "type":"SourceFile",
    "start":{"line":8,"column":6,"offset":141},
    "end":{"line":8,"column":6,"offset":142}
  },
  "path":"render_types.js",
  "line":8,
  "endline":8,
  "start":6,
  "end":6
}
