component.js:1:11
Flags:
React$AbstractComponent<{+foo: number}, mixed, renders React$Node>
= React$AbstractComponent<
  {+foo: number},
  mixed,
  renders ?(
    boolean
    |
    number
    |
    string
    |
    {+key: (React$Key | null), +props: any, +ref: any, +type: any}
    |
    React$Portal
    |
    $Iterable<?React$Node, void, void>),
>
component.js:1:11,1:13

component.js:3:11
Flags:
React$AbstractComponent<{+bar: string}, mixed, renders number>
= React$AbstractComponent<{+bar: string}, mixed, renders number>
component.js:3:11,3:13

render_types.js:1:6
Flags:
type X = renders null
render_types.js:1:6,1:6

render_types.js:3:6
Flags:
type Y = renders (null | number)
render_types.js:3:6,3:6

render_types.js:8:6
Flags:
type Z = renders Foo
render_types.js:8:6,8:6

render_types.js:10:6
Flags:
type U = renders (React$Element<Foo> | React$Element<Bar>)
render_types.js:10:6,10:6

render_types.js:12:6
Flags:
type V = 
  renders React$Element<Foo>
  |
  React$Element<React$AbstractComponent<{}, mixed, renders React$Node>>
render_types.js:12:6,12:6

